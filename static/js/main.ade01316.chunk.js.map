{"version":3,"sources":["constants/filter-options.js","components/Dropdown/Dropdown.js","components/Filter/Filter.js","components/StatCard/StatCard.js","constants/colors.js","data/data.js","components/StatBoard/StatBoard.js","constants/sort-options.js","components/Sort/Sort.js","components/Table/Table.js","components/StatPage/StatPage.js","App.js","serviceWorker.js","index.js"],"names":["id","title","time_unit","time_unit_count","Dropdown","label","options","onChange","useState","isOpen","setIsOpen","selected","setSelected","useEffect","className","type","value","onClick","map","option","key","handleSelected","Filter","props","filterOptions","filterOption","action","payload","console","log","StatCard","statTitle","currentPeriod","lastPeriod","bgColors","style","backgroundImage","first","second","active_source","current_period","last_period","weekly_active","nps","StatBoard","statData","setStatData","isLoading","setIsLoading","asyncData","colors","Sort","sortOptions","sortOption","Table","name","htmlFor","StatPage","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ade01316.chunk.js","sourcesContent":["export default [\r\n\t{\r\n\t\tid: 1,\r\n\t\ttitle: \"This month\",\r\n\t\ttime_unit: \"MONTH\",\r\n\t\ttime_unit_count: 0,\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\ttitle: \"Last month\",\r\n\t\ttime_unit: \"MONTH\",\r\n\t\ttime_unit_count: 1,\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\ttitle: \"This quarter\",\r\n\t\ttime_unit: \"QUARTER\",\r\n\t\ttime_unit_count: 0,\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\ttitle: \"Last quarter\",\r\n\t\ttime_unit: \"QUARTER\",\r\n\t\ttime_unit_count: 1,\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\ttitle: \"This year\",\r\n\t\ttime_unit: \"YEAR\",\r\n\t\ttime_unit_count: 0,\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\ttitle: \"Last year\",\r\n\t\ttime_unit: \"YEAR\",\r\n\t\ttime_unit_count: 1,\r\n\t},\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\n//I created a custom dropdown so we can reuse it for sorting, filtering and any other UI functionality that is similar to them\r\nconst Dropdown = ({ label, options, onChange }) => {\r\n\tconst [isOpen, setIsOpen] = useState(false);\r\n\tconst [selected, setSelected] = useState(options && options[0]); //Sets the first option in our options prop as the default sort/filtering option\r\n\r\n\tuseEffect(() => {\r\n\t\tif (onChange) {\r\n\t\t\t//Any function passed as the onChange prop will be called with the currently selected option and can use it to request new data or modify UI appropriately.\r\n\t\t\tonChange(selected);\r\n\t\t}\r\n\t}, [selected, onChange]);\r\n\r\n\tconst toggleDropdown = () => setIsOpen(!isOpen); //This function controls the opening/closing of the dropdown\r\n\r\n\tconst handleSelected = (option) => {\r\n\t\tsetSelected(option);\r\n\t\tsetIsOpen(false);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"dropdown\">\r\n\t\t\t<span className=\"dropdown-label\">{label}</span>\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"dropdown-button\"\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tvalue={selected.title}\r\n\t\t\t\tonClick={toggleDropdown}\r\n\t\t\t/>\r\n\r\n\t\t\t<ul id=\"dropdown-list\" className={`dropdown-list${isOpen ? \" show\" : \"\"}`}>\r\n\t\t\t\t{options.map((option) => (\r\n\t\t\t\t\t<li\r\n\t\t\t\t\t\tclassName=\"dropdown-item\"\r\n\t\t\t\t\t\tkey={option.id}\r\n\t\t\t\t\t\tonClick={() => handleSelected(option)} //This function remembers the particular option passed via closures, and we use that to set selected item on click.\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{option.title}\r\n\t\t\t\t\t</li>\r\n\t\t\t\t))}\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\n\r\nimport filterOptions from \"../../constants/filter-options\";\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\n\r\nconst Filter = (props) => {\r\n\tconst handleFilter = (filterOption) => {\r\n\t\t//In the Dropdown component, any function passed as the onChange prop gets the currently selected option as parameter\r\n\r\n\t\tconst { time_unit, time_unit_count } = filterOption;\r\n\r\n\t\t//Under normal circumstances, we will import our FILTER action function from redux and dispatch this action here using the filterOption as payload.\r\n\t\t//But this is just a skeleton, so we can console.log what the action will look like just to see if it works.\r\n\t\tconst action = { type: \"FILTER\", payload: { time_unit, time_unit_count } };\r\n\r\n\t\tconsole.log(action);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"filter\">\r\n\t\t\t<Dropdown\r\n\t\t\t\tlabel=\"Filter by\"\r\n\t\t\t\toptions={filterOptions}\r\n\t\t\t\tonChange={handleFilter}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\n\r\nconst StatCard = ({ statTitle, currentPeriod, lastPeriod, bgColors }) => {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tclassName=\"card\"\r\n\t\t\tstyle={{\r\n\t\t\t\tbackgroundImage: `linear-gradient(to right, ${bgColors?.first}, ${bgColors?.second})`,\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<span className=\"card__sub\">{statTitle}</span>\r\n\t\t\t<span className=\"card__value\">{currentPeriod}</span>\r\n\t\t\t<span className=\"card__sub\">{`${lastPeriod} Last period`}</span>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default StatCard;\r\n","export default [\r\n\t{ first: \"#F5C099\", second: \"#F29E98\" },\r\n\t{ first: \"#94C1F4\", second: \"#6A9FEA\" },\r\n\t{ first: \"#94D5D0\", second: \"#78D0C0\" },\r\n];\r\n","// this is the API response\r\nexport default {\r\n\tdata: {\r\n\t\tactive_source: {\r\n\t\t\tcurrent_period: 45,\r\n\t\t\tlast_period: 30,\r\n\t\t},\r\n\t\tweekly_active: {\r\n\t\t\tcurrent_period: 45,\r\n\t\t\tlast_period: 30,\r\n\t\t},\r\n\t\tnps: {\r\n\t\t\tcurrent_period: 45,\r\n\t\t\tlast_period: 30,\r\n\t\t},\r\n\t},\r\n\tstatus: \"ok\",\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport StatCard from \"../StatCard/StatCard\";\r\n\r\nimport colors from \"../../constants/colors\";\r\nimport asyncData from \"../../data/data\";\r\n\r\nconst StatBoard = (props) => {\r\n\tconst [statData, setStatData] = useState({});\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\t//The way this usually works is obvious. There's an initial call to the API to fetch our data.\r\n\t\t//This can happen here or, most likely, we'd dispatch a redux action (e.g. props.loadStatData()) that gets picked up by Thunk or Saga and does the fetch for us (via Axios or the Fetch API)\r\n\t\t//Props.loadStatData will come from connecting our component to redux of course. What we'd naturally then do is just get our data from redux (passed as props) and use it in our component.\r\n\r\n\t\t//But for demonstration purposes, we'd import our JSON data from inside our project and use it in our app.\r\n\t\tconst fetchData = () => {\r\n\t\t\tif (asyncData.status === \"ok\") {\r\n\t\t\t\tconst result = asyncData.data;\r\n\r\n\t\t\t\tsetStatData(result);\r\n\t\t\t\tsetIsLoading(false);\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, []);\r\n\r\n\tconst { active_source, weekly_active, nps } = statData;\r\n\r\n\treturn isLoading ? (\r\n\t\t<h3>Loading...</h3>\r\n\t) : (\r\n\t\t<div id=\"stat-board\" className=\"stat-board\">\r\n\t\t\t<StatCard\r\n\t\t\t\tstatTitle=\"Active sourcing\"\r\n\t\t\t\tcurrentPeriod={active_source.current_period}\r\n\t\t\t\tlastPeriod={active_source.last_period}\r\n\t\t\t\tbgColors={colors[0]}\r\n\t\t\t/>\r\n\t\t\t<StatCard\r\n\t\t\t\tstatTitle=\"Weekly active\"\r\n\t\t\t\tcurrentPeriod={weekly_active.current_period}\r\n\t\t\t\tlastPeriod={weekly_active.last_period}\r\n\t\t\t\tbgColors={colors[1]}\r\n\t\t\t/>\r\n\t\t\t<StatCard\r\n\t\t\t\tstatTitle=\"NPS\"\r\n\t\t\t\tcurrentPeriod={nps.current_period}\r\n\t\t\t\tlastPeriod={nps.last_period}\r\n\t\t\t\tbgColors={colors[2]}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default StatBoard;\r\n","export default [\r\n\t{\r\n\t\tid: 1,\r\n\t\ttitle: \"Id\",\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\ttitle: \"Segment\",\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\ttitle: \"Contract\",\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\ttitle: \"Best NPS avg\",\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\ttitle: \"Worst NPS avg\",\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\ttitle: \"...\",\r\n\t},\r\n];\r\n","import React from \"react\";\r\n\r\nimport Dropdown from \"../Dropdown/Dropdown\";\r\n\r\nimport sortOptions from \"../../constants/sort-options\";\r\n\r\nconst Sort = (props) => {\r\n\tconst handleSort = (sortOption) => {\r\n\t\t//Handle Sort here\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"sort\">\r\n\t\t\t<Dropdown label=\"Sort by\" options={sortOptions} onChange={handleSort} />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Sort;\r\n","import React from \"react\";\r\nimport Sort from \"../Sort/Sort\";\r\n\r\nconst Table = (props) => {\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"sort-box\">\r\n\t\t\t\t<div className=\"critical-box\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tname=\"critical\"\r\n\t\t\t\t\t\tid=\"critical\"\r\n\t\t\t\t\t\ttype=\"checkbox\"\r\n\t\t\t\t\t\tclassName=\"critical-checkbox\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<label htmlFor=\"critical\" className=\"critical-label\">\r\n\t\t\t\t\t\tShow critical\r\n\t\t\t\t\t</label>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Sort />\r\n\t\t\t</div>\r\n\r\n\t\t\t<table className=\"table\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr className=\"table-row\">\r\n\t\t\t\t\t\t<th className=\"table-col\">Id</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">Company name</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">Segment</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">Contract</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">Renewals</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">NPS avg</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">NPS last</th>\r\n\t\t\t\t\t\t<th className=\"table-col\">NPS first</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\r\n\t\t\t\t{/*Usually from here, we'd have fetched all of our company data as a list, and then render the rest of the table with JavaScript map function */}\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr className=\"table-row\">\r\n\t\t\t\t\t\t<td className=\"table-col\">\r\n\t\t\t\t\t\t\t<div></div>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">Gronda GmbH</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">A</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">XYZ</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">...</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">...</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">...</td>\r\n\t\t\t\t\t\t<td className=\"table-col\">...</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nimport Filter from \"../../components/Filter/Filter\";\r\nimport StatBoard from \"../../components/StatBoard/StatBoard\";\r\nimport Table from \"../Table/Table\";\r\n\r\nconst StatPage = () => {\r\n\treturn (\r\n\t\t<div className=\"stat-page\">\r\n\t\t\t<Filter />\r\n\t\t\t<StatBoard />\r\n\t\t\t<Table />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default StatPage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport StatPage from \"./components/StatPage/StatPage\";\n\nfunction App() {\n\treturn <StatPage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}